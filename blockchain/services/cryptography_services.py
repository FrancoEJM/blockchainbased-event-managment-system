import os
import json
import base64
import hashlib
import json as json_lib
from cryptography.hazmat.primitives import hashes, serialization, padding
from cryptography.hazmat.primitives.asymmetric import padding as asymmetric_padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

key_base64 = os.getenv("ENCRYPTION_KEY", "Autogenerated-Error-Key")
KEY = base64.b64decode(key_base64)


# Función para calcular el hash del bloque
async def calculate_block_hash(block_data: dict) -> str:
    block_string = json_lib.dumps(block_data, sort_keys=True).encode("utf-8")
    return hashlib.sha256(block_string).hexdigest()


async def check_digital_signature(event_data):
    try:
        # Extraer la información necesaria del objeto JSON
        transacciones = event_data["transacciones"]
        llave_publica = event_data["llave_publica"]
        firma_digital = event_data["firma_digital"]

        # Convertir transacciones a JSON y luego a bytes
        transactions_json = json_lib.dumps(transacciones, separators=(",", ":")).encode(
            "utf-8"
        )
        print(f"Transacciones JSON (bytes):\n{transactions_json}")

        # Cargar la clave pública desde el PEM
        public_key_pem = llave_publica.encode()
        print(f"Public Key PEM:\n{public_key_pem.decode()}")

        public_key = serialization.load_pem_public_key(public_key_pem)

        # Convertir la firma digital de hex a bytes
        firma_digital_bytes = bytes.fromhex(firma_digital)
        print(f"Firma Digital (hex):\n{firma_digital}")
        print(f"Firma Digital (bytes):\n{firma_digital_bytes}")

        # Verificar la firma
        public_key.verify(
            firma_digital_bytes,
            transactions_json,
            asymmetric_padding.PSS(
                mgf=asymmetric_padding.MGF1(hashes.SHA256()),
                salt_length=asymmetric_padding.PSS.MAX_LENGTH,
            ),
            hashes.SHA256(),
        )

        print("La firma digital es válida")
        return True

    except Exception as e:
        print(f"Error verificando la firma digital: {str(e)}")
        return False


def encrypt_transactions(transactions: list) -> str:
    # Convertir la lista de transacciones a JSON y luego a bytes
    transactions_json = json.dumps(transactions)
    transactions_bytes = transactions_json.encode("utf-8")

    # Crear un padder para PKCS7
    padder = padding.PKCS7(algorithms.AES.block_size).padder()
    padded_data = padder.update(transactions_bytes) + padder.finalize()

    # Generar un vector de inicialización (IV) aleatorio
    iv = os.urandom(16)

    # Configurar el cifrador AES en modo CBC
    cipher = Cipher(algorithms.AES(KEY), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    # Encriptar los datos
    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()

    # Concatenar el IV con los datos encriptados y codificar en base64
    iv_encrypted_data = iv + encrypted_data
    return base64.b64encode(iv_encrypted_data).decode("utf-8")


def decrypt_transactions(encrypted_data_str: str) -> list:
    # Decodificar el dato encriptado de base64 a bytes
    encrypted_data = base64.b64decode(encrypted_data_str)

    # Separar el IV de los datos encriptados
    iv = encrypted_data[:16]
    encrypted_data = encrypted_data[16:]

    # Configurar el cifrador AES en modo CBC
    cipher = Cipher(algorithms.AES(KEY), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    # Desencriptar los datos
    padded_data = decryptor.update(encrypted_data) + decryptor.finalize()

    # Deshacer el padding PKCS7
    unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
    transactions_bytes = unpadder.update(padded_data) + unpadder.finalize()

    # Convertir los bytes de vuelta a JSON
    transactions_json = transactions_bytes.decode("utf-8")
    return json.loads(transactions_json)
